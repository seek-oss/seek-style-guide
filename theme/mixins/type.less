@import (reference) "~basekick/mixin";
@import (reference) "../type/type";
@import (reference) "../layout/grid";

.screamingTextResponsive(@baseline: true) {
  .__responsiveType("screaming"; @baseline);
}
.yellingTextResponsive(@baseline: true) {
  .__responsiveType("yelling"; @baseline);
}
.shoutingTextResponsive(@baseline: true) {
  .__responsiveType("shouting"; @baseline);
}
.wavingTextResponsive(@baseline: true) {
  .__responsiveType("waving"; @baseline);
}
.whistlingTextResponsive(@baseline: true) {
  .__responsiveType("whistling"; @baseline);
}
.whisperingTitleTextResponsive(@baseline: true) {
  .__responsiveType("whisperingTitle"; @baseline);
}
.loudTextResponsive(@baseline: true) {
  .__responsiveType("loud"; @baseline);
}
.conversationalTextResponsive(@baseline: true) {
  .__responsiveType("conversational"; @baseline);
}
.intimateTextResponsive(@baseline: true) {
  .__responsiveType("intimate"; @baseline);
}
.whisperingTextResponsive(@baseline: true) {
  .__responsiveType("whispering"; @baseline);
}

@touchableTextHeight: @grid-row-height * @interaction-type-row-span;

.touchableText(@font-scale: @interaction-type-scale) {
  .rawText(@font-scale);
  line-height: @touchableTextHeight;
  height: @touchableTextHeight;
}

@compactTouchableTextHeight: @grid-row-height * @compact-interaction-type-row-span;

.compactTouchableText(@font-scale: @compact-interaction-type-scale) {
  .rawText(@font-scale);
  line-height: @compactTouchableTextHeight;
  height: @compactTouchableTextHeight;
}

.rawText(@font-scale: @conversational-type-scale) {
  font-size: unit((@font-scale * @base-font-size), px);
}

// Private type mixins
.__type(@type-scale; @row-span; @baseline) when (isnumber(@type-scale)) and (isnumber(@row-span)) {
  .__baselineCheck(@baseline) when (@baseline = true) {
    .basekick(@type-scale, @row-span, @font-descender-height-scale, @base-font-size, @grid-row-height);
  }
  .__baselineCheck(@baseline) when (@baseline = false) {
    .rawText(@type-scale);
    line-height: (@grid-row-height * @row-span);
  }
  .__baselineCheck(@baseline);
}

.__responsiveType(@variant; @baseline) when (isstring(@variant)) {
  // Define responsive text breakpoint limits
  @max-breakpoint: (@responsive-breakpoint - 1);
  @min-breakpoint: @responsive-breakpoint;
  // Concatenate type hierarchy variable name
  @type-scale: "@{variant}-type-scale";
  @row-span: "@{variant}-type-row-span";
  @weight: "@{variant}-type-weight";
  @mobile-type-scale: "@{type-scale}-mobile";
  @mobile-row-span: "@{row-span}-mobile";
  @mobile-weight: "@{variant}-type-weight-mobile";
  @media only screen and (max-width: @max-breakpoint) {
    .__type(@@mobile-type-scale, @@mobile-row-span, @baseline);
    font-weight: @@mobile-weight;
  }
  @media only screen and (min-width: @min-breakpoint) {
    .__type(@@type-scale, @@row-span, @baseline);
    font-weight: @@weight;
  }
}
