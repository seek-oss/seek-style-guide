@import (reference) "~basekick/mixin";
@import (reference) "../type/type";
@import (reference) "../layout/grid";

.heroText(@baseline: true) {
  .__type(@hero-type-scale, @hero-type-row-span, @baseline);
}
.headlineText(@baseline: true) {
  .__type(@headline-type-scale, @headline-type-row-span, @baseline);
}
.headingText(@baseline: true) {
  .__type(@heading-type-scale, @heading-type-row-span, @baseline);
}
.subheadingText(@baseline: true) {
  .__type(@subheading-type-scale, @subheading-type-row-span, @baseline);
}
.standardText(@baseline: true) {
  .__type(@standard-type-scale, @standard-type-row-span, @baseline);
}
.largeText(@baseline: true) {
  .__type(@large-type-scale, @large-type-row-span, @baseline);
}
.smallText(@baseline: true) {
  .__type(@small-type-scale, @small-type-row-span, @baseline);
}

.heroTextResponsive(@baseline: true) {
  .__responsiveType("hero" ; @baseline);
}
.headlineTextResponsive(@baseline: true) {
  .__responsiveType("headline" ; @baseline);
}
.headingTextResponsive(@baseline: true) {
  .__responsiveType("heading" ; @baseline);
}
.subheadingTextResponsive(@baseline: true) {
  .__responsiveType("subheading" ; @baseline);
}
.standardTextResponsive(@baseline: true) {
  .__responsiveType("standard" ; @baseline);
}
.largeTextResponsive(@baseline: true) {
  .__responsiveType("large" ; @baseline);
}
.smallTextResponsive(@baseline: true) {
  .__responsiveType("small" ; @baseline);
}

@touchableTextHeight: @row-height * @interaction-type-row-span;

.touchableText(@font-scale: @interaction-type-scale) {
  .rawText(@font-scale);
  line-height: @touchableTextHeight;
  height: @touchableTextHeight;
}

.rawText(@font-scale: @standard-type-scale) {
  font-size: unit((@font-scale * @base-font-size), px);
}

// Private type mixins
.__type(@type-scale; @row-span; @baseline)
  when
  (isnumber(@type-scale))
  and
  (isnumber(@row-span)) {
  .__baselineCheck(@baseline) when (@baseline = true) {
    .basekick(
      @type-scale,
      @row-span,
      @font-descender-height-scale,
      @base-font-size,
      @row-height
    );
  }
  .__baselineCheck(@baseline) when (@baseline = false) {
    .rawText(@type-scale);
    line-height: (@row-height * @row-span);
  }
  .__baselineCheck(@baseline);
}

.__responsiveType(@variant; @baseline) when (isstring(@variant)) {
  // Define responsive text breakpoint limits
  @max-breakpoint: (@responsive-breakpoint - 1);
  @min-breakpoint: @responsive-breakpoint;
  // Concatenate type hierarchy variable name
  @type-scale: "@{variant}-type-scale";
  @row-span: "@{variant}-type-row-span";
  @weight: "@{variant}-type-weight";
  @mobile-type-scale: "@{type-scale}-mobile";
  @mobile-row-span: "@{row-span}-mobile";
  @mobile-weight: "@{variant}-type-weight-mobile";
  @media only screen and (max-width: @max-breakpoint) {
    .__type(@@mobile-type-scale, @@mobile-row-span, @baseline);
    font-weight: @@mobile-weight;
  }
  @media only screen and (min-width: @min-breakpoint) {
    .__type(@@type-scale, @@row-span, @baseline);
    font-weight: @@weight;
  }
}
